/* automatically generated by rust-bindgen */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const SPX_NOERROR: u32 = 0;
pub const __SPX_TRACE_LEVEL_INFO: u32 = 8;
pub const __SPX_TRACE_LEVEL_WARNING: u32 = 4;
pub const __SPX_TRACE_LEVEL_ERROR: u32 = 2;
pub const __SPX_TRACE_LEVEL_VERBOSE: u32 = 16;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[doc = " <summary>"]
#[doc = " Type definition for SPX result codes."]
#[doc = " </summary>"]
pub type SPXHR = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _spx_empty {}
#[test]
fn bindgen_test_layout__spx_empty() {
    assert_eq!(
        ::std::mem::size_of::<_spx_empty>(),
        0usize,
        concat!("Size of: ", stringify!(_spx_empty))
    );
    assert_eq!(
        ::std::mem::align_of::<_spx_empty>(),
        1usize,
        concat!("Alignment of ", stringify!(_spx_empty))
    );
}
pub type _spxhandle = *mut _spx_empty;
pub type SPXHANDLE = _spxhandle;
pub type SPXASYNCHANDLE = SPXHANDLE;
pub type SPXFACTORYHANDLE = SPXHANDLE;
pub type SPXRECOHANDLE = SPXHANDLE;
pub type SPXRESULTHANDLE = SPXHANDLE;
pub type SPXEVENTHANDLE = SPXHANDLE;
pub type SPXSESSIONHANDLE = SPXHANDLE;
pub type SPXTRIGGERHANDLE = SPXHANDLE;
pub type SPXLUMODELHANDLE = SPXHANDLE;
pub type SPXKEYWORDHANDLE = SPXHANDLE;
pub type SPXERRORHANDLE = SPXHANDLE;
pub type SPXAUDIOSTREAMFORMATHANDLE = SPXHANDLE;
pub type SPXAUDIOSTREAMHANDLE = SPXHANDLE;
pub type SPXAUDIOCONFIGHANDLE = SPXHANDLE;
pub type SPXPROPERTYBAGHANDLE = SPXHANDLE;
pub type SPXSPEECHCONFIGHANDLE = SPXHANDLE;
pub type SPXCONNECTIONHANDLE = SPXHANDLE;
pub type const_char_ptr = *const ::std::os::raw::c_char;
extern "C" {
    pub fn error_get_message(errorHandle: SPXERRORHANDLE) -> const_char_ptr;
}
extern "C" {
    pub fn error_get_call_stack(errorHandle: SPXERRORHANDLE) -> const_char_ptr;
}
extern "C" {
    pub fn error_get_error_code(errorHandle: SPXERRORHANDLE) -> SPXHR;
}
extern "C" {
    pub fn error_release(errorHandle: SPXERRORHANDLE) -> SPXHR;
}
extern "C" {
    pub fn property_bag_is_valid(hpropbag: SPXPROPERTYBAGHANDLE) -> bool;
}
extern "C" {
    pub fn property_bag_set_string(
        hpropbag: SPXPROPERTYBAGHANDLE,
        id: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn property_bag_get_string(
        hpropbag: SPXPROPERTYBAGHANDLE,
        id: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
        defaultValue: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn property_bag_free_string(
        value: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn property_bag_release(hpropbag: SPXPROPERTYBAGHANDLE) -> SPXHR;
}
pub const PropertyId_SpeechServiceConnection_Key: PropertyId = 1000;
pub const PropertyId_SpeechServiceConnection_Endpoint: PropertyId = 1001;
pub const PropertyId_SpeechServiceConnection_Region: PropertyId = 1002;
pub const PropertyId_SpeechServiceAuthorization_Token: PropertyId = 1003;
pub const PropertyId_SpeechServiceAuthorization_Type: PropertyId = 1004;
pub const PropertyId_SpeechServiceConnection_EndpointId: PropertyId = 1005;
pub const PropertyId_SpeechServiceConnection_ProxyHostName: PropertyId = 1100;
pub const PropertyId_SpeechServiceConnection_ProxyPort: PropertyId = 1101;
pub const PropertyId_SpeechServiceConnection_ProxyUserName: PropertyId = 1102;
pub const PropertyId_SpeechServiceConnection_ProxyPassword: PropertyId = 1103;
pub const PropertyId_SpeechServiceConnection_TranslationToLanguages:
    PropertyId = 2000;
pub const PropertyId_SpeechServiceConnection_TranslationVoice: PropertyId =
    2001;
pub const PropertyId_SpeechServiceConnection_TranslationFeatures: PropertyId =
    2002;
pub const PropertyId_SpeechServiceConnection_IntentRegion: PropertyId = 2003;
pub const PropertyId_SpeechServiceConnection_RecoMode: PropertyId = 3000;
pub const PropertyId_SpeechServiceConnection_RecoLanguage: PropertyId = 3001;
pub const PropertyId_Speech_SessionId: PropertyId = 3002;
pub const PropertyId_SpeechServiceResponse_RequestDetailedResultTrueFalse:
    PropertyId = 4000;
pub const PropertyId_SpeechServiceResponse_RequestProfanityFilterTrueFalse:
    PropertyId = 4001;
pub const PropertyId_SpeechServiceResponse_JsonResult: PropertyId = 5000;
pub const PropertyId_SpeechServiceResponse_JsonErrorDetails: PropertyId = 5001;
pub const PropertyId_CancellationDetails_Reason: PropertyId = 6000;
pub const PropertyId_CancellationDetails_ReasonText: PropertyId = 6001;
pub const PropertyId_CancellationDetails_ReasonDetailedText: PropertyId = 6002;
pub const PropertyId_LanguageUnderstandingServiceResponse_JsonResult:
    PropertyId = 7000;
pub type PropertyId = u32;
extern "C" {
    pub fn intent_result_get_intent_id(
        hresult: SPXRESULTHANDLE,
        pszIntentId: *mut ::std::os::raw::c_char,
        cchIntentId: u32,
    ) -> SPXHR;
}
extern "C" {
    pub fn intent_trigger_handle_is_valid(htrigger: SPXTRIGGERHANDLE) -> bool;
}
extern "C" {
    pub fn intent_trigger_create_from_phrase(
        htrigger: *mut SPXTRIGGERHANDLE,
        phrase: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn intent_trigger_create_from_language_understanding_model(
        htrigger: *mut SPXTRIGGERHANDLE,
        hlumodel: SPXLUMODELHANDLE,
        intentName: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn intent_trigger_handle_release(htrigger: SPXTRIGGERHANDLE) -> SPXHR;
}
extern "C" {
    pub fn intent_recognizer_add_intent(
        hreco: SPXRECOHANDLE,
        intentId: *const ::std::os::raw::c_char,
        htrigger: SPXTRIGGERHANDLE,
    ) -> SPXHR;
}
#[doc = " <summary>"]
#[doc = " Defines the header of the buffer that returns translation text results. The buffer starts with the header whose structure is"]
#[doc = " defined below, and then follows the translation results for all required languages."]
#[doc = " </summary>"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Result_TranslationTextBufferHeader {
    #[doc = " <summary>"]
    #[doc = " The total size of the buffer, including translation results."]
    #[doc = " </summary>"]
    pub bufferSize: usize,
    #[doc = " <summary>"]
    #[doc = " The number of target languages. This indicates the array size of targetLanguages and translationTexts."]
    #[doc = " </summary>"]
    pub numberEntries: usize,
    #[doc = " <summary>"]
    #[doc = " Points to an array of target language names. The size of the array is numberEntries."]
    #[doc = " </summary>"]
    pub targetLanguages: *mut *mut ::std::os::raw::c_char,
    #[doc = " <summary>"]
    #[doc = " Points to an array of translation texts. The element in the array is the translation text of the target language which has the same index in targetLanguages."]
    #[doc = " </summary>"]
    pub translationTexts: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout__Result_TranslationTextBufferHeader() {
    assert_eq!(
        ::std::mem::size_of::<_Result_TranslationTextBufferHeader>(),
        32usize,
        concat!("Size of: ", stringify!(_Result_TranslationTextBufferHeader))
    );
    assert_eq!(
        ::std::mem::align_of::<_Result_TranslationTextBufferHeader>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(_Result_TranslationTextBufferHeader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Result_TranslationTextBufferHeader>()))
                .bufferSize as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Result_TranslationTextBufferHeader),
            "::",
            stringify!(bufferSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Result_TranslationTextBufferHeader>()))
                .numberEntries as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Result_TranslationTextBufferHeader),
            "::",
            stringify!(numberEntries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Result_TranslationTextBufferHeader>()))
                .targetLanguages as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_Result_TranslationTextBufferHeader),
            "::",
            stringify!(targetLanguages)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_Result_TranslationTextBufferHeader>()))
                .translationTexts as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_Result_TranslationTextBufferHeader),
            "::",
            stringify!(translationTexts)
        )
    );
}
pub type Result_TranslationTextBufferHeader =
    _Result_TranslationTextBufferHeader;
extern "C" {
    pub fn translation_text_result_get_translation_text_buffer_header(
        handle: SPXRESULTHANDLE,
        textBuffer: *mut Result_TranslationTextBufferHeader,
        lengthPointer: *mut usize,
    ) -> SPXHR;
}
extern "C" {
    pub fn translation_synthesis_result_get_audio_data(
        handle: SPXRESULTHANDLE,
        audioBuffer: *mut u8,
        lengthPointer: *mut usize,
    ) -> SPXHR;
}
pub type PTRANSLATIONSYNTHESIS_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn translator_synthesizing_audio_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PTRANSLATIONSYNTHESIS_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    pub fn language_understanding_model_handle_is_valid(
        hlumodel: SPXLUMODELHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn language_understanding_model_create_from_uri(
        hlumodel: *mut SPXLUMODELHANDLE,
        uri: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn language_understanding_model_create_from_app_id(
        hlumodel: *mut SPXLUMODELHANDLE,
        appId: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn language_understanding_model_create_from_subscription(
        hlumodel: *mut SPXLUMODELHANDLE,
        subscriptionKey: *const ::std::os::raw::c_char,
        appId: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn language_understanding_model__handle_release(
        hlumodel: SPXLUMODELHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn keyword_recognition_model_handle_is_valid(
        hkeyword: SPXKEYWORDHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn keyword_recognition_model_handle_release(
        hkeyword: SPXKEYWORDHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn keyword_recognition_model_create_from_file(
        fileName: *const ::std::os::raw::c_char,
        phkwmodel: *mut SPXKEYWORDHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_stream_format_is_handle_valid(
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn audio_stream_format_create_from_default_input(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_stream_format_create_from_waveformat_pcm(
        hformat: *mut SPXAUDIOSTREAMFORMATHANDLE,
        samplesPerSecond: u32,
        bitsPerSample: u8,
        channels: u8,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_stream_format_release(
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_stream_is_handle_valid(
        haudioStream: SPXAUDIOSTREAMHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn audio_stream_create_push_audio_input_stream(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_stream_create_pull_audio_input_stream(
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_stream_release(haudioStream: SPXAUDIOSTREAMHANDLE) -> SPXHR;
}
pub type CUSTOM_AUDIO_PULL_STREAM_READ_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        pvContext: *mut ::std::os::raw::c_void,
        buffer: *mut u8,
        size: u32,
    ) -> ::std::os::raw::c_int,
>;
pub type CUSTOM_AUDIO_PULL_STREAM_CLOSE_CALLBACK = ::std::option::Option<
    unsafe extern "C" fn(pvContext: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn pull_audio_input_stream_set_callbacks(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
        readCallback: CUSTOM_AUDIO_PULL_STREAM_READ_CALLBACK,
        closeCallback: CUSTOM_AUDIO_PULL_STREAM_CLOSE_CALLBACK,
    ) -> SPXHR;
}
extern "C" {
    pub fn push_audio_input_stream_write(
        haudioStream: SPXAUDIOSTREAMHANDLE,
        buffer: *mut u8,
        size: u32,
    ) -> SPXHR;
}
extern "C" {
    pub fn push_audio_input_stream_close(
        haudioStream: SPXAUDIOSTREAMHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_config_is_handle_valid(
        haudioConfig: SPXAUDIOCONFIGHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn audio_config_create_audio_input_from_default_microphone(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_config_create_audio_input_from_wav_file_name(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        fileName: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_config_create_audio_input_from_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: SPXAUDIOSTREAMHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_config_create_push_audio_input_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_config_create_pull_audio_input_stream(
        haudioConfig: *mut SPXAUDIOCONFIGHANDLE,
        haudioStream: *mut SPXAUDIOSTREAMHANDLE,
        hformat: SPXAUDIOSTREAMFORMATHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn audio_config_release(haudioConfig: SPXAUDIOCONFIGHANDLE) -> SPXHR;
}
extern "C" {
    pub fn recognizer_create_speech_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_create_translation_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_create_intent_recognizer_from_config(
        phreco: *mut SPXRECOHANDLE,
        hspeechconfig: SPXSPEECHCONFIGHANDLE,
        haudioInput: SPXAUDIOCONFIGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_handle_is_valid(hreco: SPXRECOHANDLE) -> bool;
}
extern "C" {
    pub fn recognizer_handle_release(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    pub fn recognizer_async_handle_is_valid(hasync: SPXASYNCHANDLE) -> bool;
}
extern "C" {
    pub fn recognizer_async_handle_release(hasync: SPXASYNCHANDLE) -> SPXHR;
}
extern "C" {
    pub fn recognizer_result_handle_is_valid(hresult: SPXRESULTHANDLE) -> bool;
}
extern "C" {
    pub fn recognizer_result_handle_release(hresult: SPXRESULTHANDLE) -> SPXHR;
}
extern "C" {
    pub fn recognizer_event_handle_is_valid(hevent: SPXEVENTHANDLE) -> bool;
}
extern "C" {
    pub fn recognizer_event_handle_release(hevent: SPXEVENTHANDLE) -> SPXHR;
}
extern "C" {
    pub fn recognizer_enable(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    pub fn recognizer_disable(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    pub fn recognizer_is_enabled(
        hreco: SPXRECOHANDLE,
        pfEnabled: *mut bool,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_get_property_bag(
        hreco: SPXRECOHANDLE,
        hpropbag: *mut SPXPROPERTYBAGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_recognize_once(
        hreco: SPXRECOHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_recognize_once_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_recognize_once_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
        phresult: *mut SPXRESULTHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_start_continuous_recognition(
        hreco: SPXRECOHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_start_continuous_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_start_continuous_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_stop_continuous_recognition(
        hreco: SPXRECOHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_stop_continuous_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_stop_continuous_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_start_keyword_recognition(
        hreco: SPXRECOHANDLE,
        hkeyword: SPXKEYWORDHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_start_keyword_recognition_async(
        hreco: SPXRECOHANDLE,
        hkeyword: SPXKEYWORDHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_start_keyword_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_stop_keyword_recognition(hreco: SPXRECOHANDLE) -> SPXHR;
}
extern "C" {
    pub fn recognizer_stop_keyword_recognition_async(
        hreco: SPXRECOHANDLE,
        phasync: *mut SPXASYNCHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_stop_keyword_recognition_async_wait_for(
        hasync: SPXASYNCHANDLE,
        milliseconds: u32,
    ) -> SPXHR;
}
pub type PSESSION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn recognizer_session_started_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PSESSION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_session_stopped_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PSESSION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
pub type PRECOGNITION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        hreco: SPXRECOHANDLE,
        hevent: SPXEVENTHANDLE,
        pvContext: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn recognizer_recognizing_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_recognized_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_canceled_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_speech_start_detected_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_speech_end_detected_set_callback(
        hreco: SPXRECOHANDLE,
        pCallback: PRECOGNITION_CALLBACK_FUNC,
        pvContext: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_session_event_get_session_id(
        hevent: SPXEVENTHANDLE,
        pszSessionId: *mut ::std::os::raw::c_char,
        cchSessionId: u32,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_recognition_event_get_offset(
        hevent: SPXEVENTHANDLE,
        pszOffset: *mut u64,
    ) -> SPXHR;
}
extern "C" {
    pub fn recognizer_recognition_event_get_result(
        hevent: SPXEVENTHANDLE,
        phresult: *mut SPXRESULTHANDLE,
    ) -> SPXHR;
}
pub const Result_Reason_ResultReason_NoMatch: Result_Reason = 0;
pub const Result_Reason_ResultReason_Canceled: Result_Reason = 1;
pub const Result_Reason_ResultReason_RecognizingSpeech: Result_Reason = 2;
pub const Result_Reason_ResultReason_RecognizedSpeech: Result_Reason = 3;
pub const Result_Reason_ResultReason_RecognizingIntent: Result_Reason = 4;
pub const Result_Reason_ResultReason_RecognizedIntent: Result_Reason = 5;
pub const Result_Reason_ResultReason_TranslatingSpeech: Result_Reason = 6;
pub const Result_Reason_ResultReason_TranslatedSpeech: Result_Reason = 7;
pub const Result_Reason_ResultReason_SynthesizingAudio: Result_Reason = 8;
pub const Result_Reason_ResultReason_SynthesizingAudioComplete: Result_Reason =
    9;
pub type Result_Reason = u32;
pub const Result_CancellationReason_CancellationReason_Error:
    Result_CancellationReason = 1;
pub const Result_CancellationReason_CancellationReason_EndOfStream:
    Result_CancellationReason = 2;
pub type Result_CancellationReason = u32;
pub const Result_CancellationErrorCode_CancellationErrorCode_NoError:
    Result_CancellationErrorCode = 0;
pub const Result_CancellationErrorCode_CancellationErrorCode_AuthenticationFailure : Result_CancellationErrorCode = 1 ;
pub const Result_CancellationErrorCode_CancellationErrorCode_BadRequest:
    Result_CancellationErrorCode = 2;
pub const Result_CancellationErrorCode_CancellationErrorCode_TooManyRequests:
    Result_CancellationErrorCode = 3;
pub const Result_CancellationErrorCode_CancellationErrorCode_Forbidden:
    Result_CancellationErrorCode = 4;
pub const Result_CancellationErrorCode_CancellationErrorCode_ConnectionFailure : Result_CancellationErrorCode = 5 ;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceTimeout:
    Result_CancellationErrorCode = 6;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceError:
    Result_CancellationErrorCode = 7;
pub const Result_CancellationErrorCode_CancellationErrorCode_ServiceUnavailable : Result_CancellationErrorCode = 8 ;
pub const Result_CancellationErrorCode_CancellationErrorCode_RuntimeError:
    Result_CancellationErrorCode = 9;
pub type Result_CancellationErrorCode = u32;
pub const Result_NoMatchReason_NoMatchReason_NotRecognized:
    Result_NoMatchReason = 1;
pub const Result_NoMatchReason_NoMatchReason_InitialSilenceTimeout:
    Result_NoMatchReason = 2;
pub const Result_NoMatchReason_NoMatchReason_InitialBabbleTimeout:
    Result_NoMatchReason = 3;
pub type Result_NoMatchReason = u32;
extern "C" {
    pub fn result_get_reason(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_Reason,
    ) -> SPXHR;
}
extern "C" {
    pub fn result_get_reason_canceled(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_CancellationReason,
    ) -> SPXHR;
}
extern "C" {
    pub fn result_get_canceled_error_code(
        hresult: SPXRESULTHANDLE,
        errorCode: *mut Result_CancellationErrorCode,
    ) -> SPXHR;
}
extern "C" {
    pub fn result_get_no_match_reason(
        hresult: SPXRESULTHANDLE,
        reason: *mut Result_NoMatchReason,
    ) -> SPXHR;
}
extern "C" {
    pub fn result_get_result_id(
        hresult: SPXRESULTHANDLE,
        pszResultId: *mut ::std::os::raw::c_char,
        cchResultId: u32,
    ) -> SPXHR;
}
extern "C" {
    pub fn result_get_text(
        hresult: SPXRESULTHANDLE,
        pszText: *mut ::std::os::raw::c_char,
        cchText: u32,
    ) -> SPXHR;
}
extern "C" {
    pub fn result_get_offset(
        hresult: SPXRESULTHANDLE,
        offset: *mut u64,
    ) -> SPXHR;
}
extern "C" {
    pub fn result_get_duration(
        hresult: SPXRESULTHANDLE,
        duration: *mut u64,
    ) -> SPXHR;
}
extern "C" {
    pub fn result_get_property_bag(
        hresult: SPXRESULTHANDLE,
        hpropbag: *mut SPXPROPERTYBAGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn session_from_recognizer(
        hreco: SPXRECOHANDLE,
        phsession: *mut SPXSESSIONHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn session_handle_is_valid(hsession: SPXSESSIONHANDLE) -> bool;
}
extern "C" {
    pub fn session_handle_release(hsession: SPXSESSIONHANDLE) -> SPXHR;
}
extern "C" {
    pub fn session_get_property_bag(
        hsession: SPXSESSIONHANDLE,
        hpropbag: *mut SPXPROPERTYBAGHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn connection_from_recognizer(
        recognizerHandle: SPXRECOHANDLE,
        connectionHandle: *mut SPXCONNECTIONHANDLE,
    ) -> SPXHR;
}
extern "C" {
    pub fn connection_handle_is_valid(handle: SPXCONNECTIONHANDLE) -> bool;
}
extern "C" {
    pub fn connection_handle_release(handle: SPXCONNECTIONHANDLE) -> SPXHR;
}
extern "C" {
    pub fn connection_open(
        handle: SPXCONNECTIONHANDLE,
        forContinuousRecognition: bool,
    ) -> SPXHR;
}
extern "C" {
    pub fn connection_close(handle: SPXCONNECTIONHANDLE) -> SPXHR;
}
pub type CONNECTION_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        event: SPXEVENTHANDLE,
        context: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn connection_connected_set_callback(
        connection: SPXCONNECTIONHANDLE,
        callback: CONNECTION_CALLBACK_FUNC,
        context: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
extern "C" {
    pub fn connection_disconnected_set_callback(
        connection: SPXCONNECTIONHANDLE,
        Callback: CONNECTION_CALLBACK_FUNC,
        context: *mut ::std::os::raw::c_void,
    ) -> SPXHR;
}
pub const SpeechOutputFormat_SpeechOutputFormat_Simple: SpeechOutputFormat = 0;
pub const SpeechOutputFormat_SpeechOutputFormat_Detailed: SpeechOutputFormat =
    1;
pub type SpeechOutputFormat = u32;
extern "C" {
    pub fn speech_config_is_handle_valid(
        hconfig: SPXSPEECHCONFIGHANDLE,
    ) -> bool;
}
extern "C" {
    pub fn speech_config_from_subscription(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        subscription: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn speech_config_from_authorization_token(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        authToken: *const ::std::os::raw::c_char,
        region: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn speech_config_from_endpoint(
        hconfig: *mut SPXSPEECHCONFIGHANDLE,
        endpoint: *const ::std::os::raw::c_char,
        subscription: *const ::std::os::raw::c_char,
    ) -> SPXHR;
}
extern "C" {
    pub fn speech_config_release(hconfig: SPXSPEECHCONFIGHANDLE) -> SPXHR;
}
extern "C" {
    pub fn speech_config_get_property_bag(
        hconfig: SPXSPEECHCONFIGHANDLE,
        hpropbag: *mut SPXPROPERTYBAGHANDLE,
    ) -> SPXHR;
}
